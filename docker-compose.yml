version: '2'

services:  
  nginx-proxy:
    image: jwilder/nginx-proxy
    # We can name the container when the app runs
    container_name: nginx-proxy
    # Set the service to restart if it crashes
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - '/etc/nginx/vhost.d'
      - '/usr/share/nginx/html'
      - '/etc/nginx/certs:/etc/nginx/certs:ro' 
      - '/var/run/docker.sock:/tmp/docker.sock:ro'
    # And we make sure Docker knows we need access to ghost
    # This is the reason we can simply say 'ghost' in our
    #   NGINX config
    depends_on:
      - blog_willdearman_com
  letsencrypt-nginx-proxy:
    container_name: letsencrypt-nginx-proxy
    image: 'jrcs/letsencrypt-nginx-proxy-companion'
    volumes:
      - '/etc/nginx/certs:/etc/nginx/certs'
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
    #volumes_from:
    #  - nginx-proxy
  nginx-serve:
    image: nginx
    container_name: nginx-serve
    restart: always
    volumes:
      # - "../../../volumes/examples/simple-site/conf.d/:/etc/nginx/conf.d"
      - ./static-sites/www_willdearman_com:/usr/share/nginx/html:ro
    volumes_from:
      - nginx-proxy
    environment:
      - VIRTUAL_HOST=www.willdearman.com
      - VIRTUAL_PORT=80
      - NGINX_HOST=www.willdearman.com
      - NGINX_PORT=80
    #networks:
    #  - proxy-tier
  blog_willdearman_com:
    # Official Ghost image for Docker
    image: ghost
    container_name: blog_willdearman_com
    # Restarting our blog if it crashes
    restart: always
    # Our blog will have persistent data, so we store that
    #   in a folder created at 'blog/data/ghost'
    volumes:
      - ./data/blog_willdearman_com:/var/lib/ghost:rw
    # We'll also let Ghost know that we are in production
    environment:
      - PROD_DOMAIN=https://blog.willdearman.com
      - NODE_ENV=production
      - VIRTUAL_HOST=blog.willdearman.com
      - LETSENCRYPT_HOST=blog.willdearman.com
      - LETSENCRYPT_EMAIL="will@willdearman.com"
    expose:
      - "2368"
# On new maching must run the following command to create network
#   docker network create nginx-net
#networks:
#  proxy-tier:
#    external:
#      name: nginx-proxy
